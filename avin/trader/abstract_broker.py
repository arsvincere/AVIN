#!/usr/bin/env  python3
# ============================================================================
# URL:          http://arsvincere.com
# AUTHOR:       Alex Avin
# E-MAIL:       mr.alexavin@gmail.com
# LICENSE:      GNU GPLv3
# ============================================================================

from __future__ import annotations

import abc

from avin.core import Operation, Order


class Broker(metaclass=abc.ABCMeta):  # {{{
    name: str = None
    # new_bar = AsyncSignal(BarEvent)
    # new_transaction = AsyncSignal(TransactionEvent)
    # вот тут потом аккаунт уже запрашивает ордер стэйт и
    # обновляет его статус, количество выполненных, или
    # если он там полностью уже выполнен, получает операцию
    # и отправляет сигнал order.executed.async_emit(order, operation)

    # list[OrderStage]: price, quantity, id, dt

    def __init__(self): ...
    async def connect(self): ...
    async def disconnect(self): ...
    async def isConnect(self) -> bool: ...
    async def isMarketOpen(self) -> bool: ...

    async def getAccount(self, account_name: str) -> Account: ...
    async def getAllAccounts(self) -> list[Account]: ...
    async def getMoney(self, account: Account) -> float: ...
    async def getLimitOrders(self, account: Account) -> list[Order]: ...
    async def getStopOrders(self, account: Account) -> list[Order]: ...
    async def getOperations(self, account: Account) -> list[Operation]: ...
    async def getPositions(self, account: Account) -> list[Postition]: ...
    async def getDetailedPortfolio(self, account: Account) -> Portfolio: ...
    async def getWithdrawLimits(self, account: Account): ...

    async def getOrderStatus(self, order: Order) -> Order.Status: ...
    async def getOrderOperation(self, order: Order) -> Order.Status: ...


# }}}
